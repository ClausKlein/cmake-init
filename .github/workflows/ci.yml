name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

jobs:
  shared_static:
    strategy:
      fail-fast: false

      matrix:
        type: [shared, static]

        os: [macos, ubuntu, windows]

        include:
        - { type: shared, build: YES }
        - { type: static, build: NO }

    name: "Library: ${{ matrix.type }} (${{ matrix.os }})"

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Create project
      run: |
        python -m zipapp cmake-init -p "/usr/bin/env python3"
        python cmake-init.pyz create -s proj

    - name: Configure
      working-directory: proj
      run: cmake --preset=ci-${{ matrix.os }}
        -D BUILD_SHARED_LIBS=${{ matrix.build }}

    - name: Build
      working-directory: proj
      run: cmake --build build --config Release

    - name: Install
      working-directory: proj
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: proj/build
      run: ctest -C Release

  other:
    strategy:
      fail-fast: false

      matrix:
        type: [-e, -ho]

        os: [macos, ubuntu, windows]

        include:
        - { type: -e, name: Executable }
        - { type: -ho, name: "Library: header-only" }

    name: ${{ matrix.name }} (${{ matrix.os }})

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Create project
      run: |
        python -m zipapp cmake-init -p "/usr/bin/env python3"
        python cmake-init.pyz create ${{ matrix.type }} proj

    - name: Configure
      working-directory: proj
      run: cmake --preset=ci-${{ matrix.os }}

    - name: Build
      working-directory: proj
      run: cmake --build build --config Release

    - name: Install
      working-directory: proj
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: proj/build
      run: ctest -C Release

  release:
    name: Package a release

    if: github.event_name == 'push'

    needs: [shared_static, other]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Package
      run: python -m zipapp cmake-init -p "/usr/bin/env python3"

    - name: Get version
      id: version
      shell: sh
      run: echo "::set-output name=version::$(python cmake-init.pyz --version)"

    - uses: mathieudutour/github-tag-action@v5.4
      id: tag_version
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ steps.version.outputs.version }}

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: cmake-init.pyz
        prerelease: true
        body: Release of version ${{ steps.tag_version.outputs.new_tag }}
        name: ${{ steps.tag_version.outputs.new_tag }}
